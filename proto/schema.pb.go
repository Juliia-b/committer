// Code generated by protoc-gen-go. DO NOT EDIT.
// source: schema.proto

package schema

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CommitType int32

const (
	CommitType_TWO_PHASE_COMMIT   CommitType = 0
	CommitType_THREE_PHASE_COMMIT CommitType = 1
)

var CommitType_name = map[int32]string{
	0: "TWO_PHASE_COMMIT",
	1: "THREE_PHASE_COMMIT",
}

var CommitType_value = map[string]int32{
	"TWO_PHASE_COMMIT":   0,
	"THREE_PHASE_COMMIT": 1,
}

func (x CommitType) String() string {
	return proto.EnumName(CommitType_name, int32(x))
}

func (CommitType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{0}
}

type Type int32

const (
	Type_ACK  Type = 0
	Type_NACK Type = 1
)

var Type_name = map[int32]string{
	0: "ACK",
	1: "NACK",
}

var Type_value = map[string]int32{
	"ACK":  0,
	"NACK": 1,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}

func (Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{1}
}

type ProposeRequest struct {
	Key                  string     `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value                []byte     `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	CommitType           CommitType `protobuf:"varint,3,opt,name=CommitType,proto3,enum=schema.CommitType" json:"CommitType,omitempty"`
	Index                uint64     `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ProposeRequest) Reset()         { *m = ProposeRequest{} }
func (m *ProposeRequest) String() string { return proto.CompactTextString(m) }
func (*ProposeRequest) ProtoMessage()    {}
func (*ProposeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{0}
}

func (m *ProposeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProposeRequest.Unmarshal(m, b)
}
func (m *ProposeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProposeRequest.Marshal(b, m, deterministic)
}
func (m *ProposeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposeRequest.Merge(m, src)
}
func (m *ProposeRequest) XXX_Size() int {
	return xxx_messageInfo_ProposeRequest.Size(m)
}
func (m *ProposeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProposeRequest proto.InternalMessageInfo

func (m *ProposeRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ProposeRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ProposeRequest) GetCommitType() CommitType {
	if m != nil {
		return m.CommitType
	}
	return CommitType_TWO_PHASE_COMMIT
}

func (m *ProposeRequest) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type Response struct {
	Type                 Type     `protobuf:"varint,1,opt,name=Type,proto3,enum=schema.Type" json:"Type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_ACK
}

type PrecommitRequest struct {
	Index                uint64   `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrecommitRequest) Reset()         { *m = PrecommitRequest{} }
func (m *PrecommitRequest) String() string { return proto.CompactTextString(m) }
func (*PrecommitRequest) ProtoMessage()    {}
func (*PrecommitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{2}
}

func (m *PrecommitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrecommitRequest.Unmarshal(m, b)
}
func (m *PrecommitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrecommitRequest.Marshal(b, m, deterministic)
}
func (m *PrecommitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrecommitRequest.Merge(m, src)
}
func (m *PrecommitRequest) XXX_Size() int {
	return xxx_messageInfo_PrecommitRequest.Size(m)
}
func (m *PrecommitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrecommitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrecommitRequest proto.InternalMessageInfo

func (m *PrecommitRequest) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type CommitRequest struct {
	Index                uint64   `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	IsRollback           bool     `protobuf:"varint,2,opt,name=isRollback,proto3" json:"isRollback,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommitRequest) Reset()         { *m = CommitRequest{} }
func (m *CommitRequest) String() string { return proto.CompactTextString(m) }
func (*CommitRequest) ProtoMessage()    {}
func (*CommitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{3}
}

func (m *CommitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitRequest.Unmarshal(m, b)
}
func (m *CommitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitRequest.Marshal(b, m, deterministic)
}
func (m *CommitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitRequest.Merge(m, src)
}
func (m *CommitRequest) XXX_Size() int {
	return xxx_messageInfo_CommitRequest.Size(m)
}
func (m *CommitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommitRequest proto.InternalMessageInfo

func (m *CommitRequest) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *CommitRequest) GetIsRollback() bool {
	if m != nil {
		return m.IsRollback
	}
	return false
}

type Entry struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                []byte   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Entry) Reset()         { *m = Entry{} }
func (m *Entry) String() string { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()    {}
func (*Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{4}
}

func (m *Entry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Entry.Unmarshal(m, b)
}
func (m *Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Entry.Marshal(b, m, deterministic)
}
func (m *Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entry.Merge(m, src)
}
func (m *Entry) XXX_Size() int {
	return xxx_messageInfo_Entry.Size(m)
}
func (m *Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_Entry proto.InternalMessageInfo

func (m *Entry) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Entry) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type Msg struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Msg) Reset()         { *m = Msg{} }
func (m *Msg) String() string { return proto.CompactTextString(m) }
func (*Msg) ProtoMessage()    {}
func (*Msg) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{5}
}

func (m *Msg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Msg.Unmarshal(m, b)
}
func (m *Msg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Msg.Marshal(b, m, deterministic)
}
func (m *Msg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Msg.Merge(m, src)
}
func (m *Msg) XXX_Size() int {
	return xxx_messageInfo_Msg.Size(m)
}
func (m *Msg) XXX_DiscardUnknown() {
	xxx_messageInfo_Msg.DiscardUnknown(m)
}

var xxx_messageInfo_Msg proto.InternalMessageInfo

func (m *Msg) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type Value struct {
	Value                []byte   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Value) Reset()         { *m = Value{} }
func (m *Value) String() string { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()    {}
func (*Value) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{6}
}

func (m *Value) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Value.Unmarshal(m, b)
}
func (m *Value) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Value.Marshal(b, m, deterministic)
}
func (m *Value) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Value.Merge(m, src)
}
func (m *Value) XXX_Size() int {
	return xxx_messageInfo_Value.Size(m)
}
func (m *Value) XXX_DiscardUnknown() {
	xxx_messageInfo_Value.DiscardUnknown(m)
}

var xxx_messageInfo_Value proto.InternalMessageInfo

func (m *Value) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterEnum("schema.CommitType", CommitType_name, CommitType_value)
	proto.RegisterEnum("schema.Type", Type_name, Type_value)
	proto.RegisterType((*ProposeRequest)(nil), "schema.ProposeRequest")
	proto.RegisterType((*Response)(nil), "schema.Response")
	proto.RegisterType((*PrecommitRequest)(nil), "schema.PrecommitRequest")
	proto.RegisterType((*CommitRequest)(nil), "schema.CommitRequest")
	proto.RegisterType((*Entry)(nil), "schema.Entry")
	proto.RegisterType((*Msg)(nil), "schema.Msg")
	proto.RegisterType((*Value)(nil), "schema.Value")
}

func init() { proto.RegisterFile("schema.proto", fileDescriptor_1c5fb4d8cc22d66a) }

var fileDescriptor_1c5fb4d8cc22d66a = []byte{
	// 386 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xdb, 0x6b, 0xe2, 0x40,
	0x14, 0xc6, 0x9d, 0x4d, 0xbc, 0x9d, 0x55, 0x09, 0x87, 0x5d, 0x37, 0x2b, 0xec, 0x92, 0xcd, 0xc3,
	0x12, 0x64, 0x71, 0xa9, 0x3e, 0x14, 0xfa, 0x26, 0x21, 0xd4, 0x22, 0xa9, 0x61, 0x1a, 0xda, 0x47,
	0x51, 0x3b, 0x58, 0xf1, 0x92, 0x34, 0x13, 0x4b, 0x7d, 0xed, 0xdf, 0xdc, 0x3f, 0xa0, 0x64, 0x62,
	0x6e, 0xd4, 0xd2, 0xb7, 0x39, 0x97, 0xef, 0x9b, 0xe4, 0xf7, 0x0d, 0x34, 0xf8, 0xe2, 0x81, 0x6d,
	0x67, 0x3d, 0x3f, 0xf0, 0x42, 0x0f, 0x2b, 0x71, 0xa5, 0xbf, 0x10, 0x68, 0x39, 0x81, 0xe7, 0x7b,
	0x9c, 0x51, 0xf6, 0xb8, 0x67, 0x3c, 0x44, 0x05, 0xa4, 0x31, 0x3b, 0xa8, 0x44, 0x23, 0x46, 0x9d,
	0x46, 0x47, 0xfc, 0x06, 0xe5, 0xdb, 0xd9, 0x66, 0xcf, 0xd4, 0x2f, 0x1a, 0x31, 0x1a, 0x34, 0x2e,
	0xb0, 0x0f, 0x60, 0x7a, 0xdb, 0xed, 0x2a, 0x74, 0x0f, 0x3e, 0x53, 0x25, 0x8d, 0x18, 0xad, 0x3e,
	0xf6, 0x8e, 0xb7, 0x64, 0x13, 0x9a, 0xdb, 0x8a, 0x9c, 0x56, 0xbb, 0x7b, 0xf6, 0xac, 0xca, 0x1a,
	0x31, 0x64, 0x1a, 0x17, 0xfa, 0x3f, 0xa8, 0x51, 0xc6, 0x7d, 0x6f, 0xc7, 0x19, 0x6a, 0x20, 0x0b,
	0x3f, 0x22, 0xfc, 0x1a, 0x89, 0x9f, 0x70, 0x12, 0x13, 0xdd, 0x00, 0xc5, 0x09, 0xd8, 0x42, 0x98,
	0x26, 0xdf, 0x9c, 0xfa, 0x92, 0xbc, 0xaf, 0x05, 0x4d, 0xf3, 0xf3, 0x35, 0xfc, 0x0d, 0xb0, 0xe2,
	0xd4, 0xdb, 0x6c, 0xe6, 0xb3, 0xc5, 0x5a, 0xfc, 0x63, 0x8d, 0xe6, 0x3a, 0xfa, 0x7f, 0x28, 0x5b,
	0xbb, 0x30, 0x38, 0x44, 0x64, 0xd6, 0x19, 0x99, 0x75, 0x4c, 0xe6, 0x29, 0x4f, 0x46, 0x14, 0xfa,
	0x0f, 0x90, 0x6c, 0xbe, 0x7c, 0xbf, 0xae, 0xff, 0x3a, 0x82, 0xcc, 0x74, 0x24, 0xa7, 0xeb, 0x5e,
	0x40, 0x91, 0x95, 0xe2, 0xde, 0x4d, 0xa6, 0xce, 0x68, 0x78, 0x63, 0x4d, 0xcd, 0x89, 0x6d, 0x5f,
	0xb9, 0x4a, 0x09, 0xdb, 0x80, 0xee, 0x88, 0x5a, 0x56, 0xb1, 0x4f, 0xba, 0x3f, 0x63, 0x6e, 0x58,
	0x05, 0x69, 0x68, 0x8e, 0x95, 0x12, 0xd6, 0x40, 0xbe, 0x8e, 0x4e, 0xa4, 0xff, 0x4a, 0xa0, 0x12,
	0xfb, 0xe2, 0x00, 0xaa, 0xc7, 0xb4, 0xb1, 0x9d, 0xa0, 0x2d, 0xc6, 0xdf, 0x51, 0x92, 0x7e, 0x1a,
	0xc9, 0x39, 0xd4, 0x53, 0xe0, 0xa8, 0x66, 0xb2, 0x62, 0x06, 0x27, 0x84, 0x67, 0xe9, 0xbd, 0xdf,
	0x8b, 0xef, 0xe2, 0x63, 0xc9, 0x5f, 0x90, 0x9c, 0x7d, 0x88, 0xcd, 0x64, 0x20, 0xc0, 0x9f, 0xd8,
	0xfb, 0x03, 0xd2, 0x25, 0x0b, 0xf1, 0x6b, 0x32, 0xb0, 0xf9, 0xb2, 0x93, 0x8a, 0x04, 0xe3, 0x79,
	0x45, 0xbc, 0xf4, 0xc1, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc8, 0x6d, 0xa4, 0x1e, 0xf9, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CommitClient is the client API for Commit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommitClient interface {
	Propose(ctx context.Context, in *ProposeRequest, opts ...grpc.CallOption) (*Response, error)
	Precommit(ctx context.Context, in *PrecommitRequest, opts ...grpc.CallOption) (*Response, error)
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*Response, error)
	Put(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*Response, error)
	Get(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*Value, error)
}

type commitClient struct {
	cc *grpc.ClientConn
}

func NewCommitClient(cc *grpc.ClientConn) CommitClient {
	return &commitClient{cc}
}

func (c *commitClient) Propose(ctx context.Context, in *ProposeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/schema.Commit/Propose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commitClient) Precommit(ctx context.Context, in *PrecommitRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/schema.Commit/Precommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commitClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/schema.Commit/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commitClient) Put(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/schema.Commit/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commitClient) Get(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := c.cc.Invoke(ctx, "/schema.Commit/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommitServer is the server API for Commit service.
type CommitServer interface {
	Propose(context.Context, *ProposeRequest) (*Response, error)
	Precommit(context.Context, *PrecommitRequest) (*Response, error)
	Commit(context.Context, *CommitRequest) (*Response, error)
	Put(context.Context, *Entry) (*Response, error)
	Get(context.Context, *Msg) (*Value, error)
}

// UnimplementedCommitServer can be embedded to have forward compatible implementations.
type UnimplementedCommitServer struct {
}

func (*UnimplementedCommitServer) Propose(ctx context.Context, req *ProposeRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Propose not implemented")
}
func (*UnimplementedCommitServer) Precommit(ctx context.Context, req *PrecommitRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Precommit not implemented")
}
func (*UnimplementedCommitServer) Commit(ctx context.Context, req *CommitRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (*UnimplementedCommitServer) Put(ctx context.Context, req *Entry) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (*UnimplementedCommitServer) Get(ctx context.Context, req *Msg) (*Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

func RegisterCommitServer(s *grpc.Server, srv CommitServer) {
	s.RegisterService(&_Commit_serviceDesc, srv)
}

func _Commit_Propose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitServer).Propose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.Commit/Propose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitServer).Propose(ctx, req.(*ProposeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commit_Precommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrecommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitServer).Precommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.Commit/Precommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitServer).Precommit(ctx, req.(*PrecommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commit_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.Commit/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitServer).Commit(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commit_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.Commit/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitServer).Put(ctx, req.(*Entry))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commit_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Msg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.Commit/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitServer).Get(ctx, req.(*Msg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Commit_serviceDesc = grpc.ServiceDesc{
	ServiceName: "schema.Commit",
	HandlerType: (*CommitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Propose",
			Handler:    _Commit_Propose_Handler,
		},
		{
			MethodName: "Precommit",
			Handler:    _Commit_Precommit_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _Commit_Commit_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _Commit_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Commit_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.proto",
}
